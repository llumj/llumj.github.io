[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Joshua Mull",
    "section": "",
    "text": "Hi there! I’m Joshua. As a current MEDS student at The Bren (UCSB), I have many interests including conservation, restoration, environmental justice, and energy. I passionately believe the road to an equitable environmental future is research that is collaborative and transparent. Outside of work, I enjoy backcountry winter camping (I know, brrr), traveling, and going on adventures with my Great Dane named Ziggy. Check out my website and learn more about me and my work!"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Joshua Mull",
    "section": "Education",
    "text": "Education\nUniversity of California, Santa Barbara | Santa Barbara, CA\nMaster of Environmental Data Science | Aug 2024 - June 2025\nThe Ohio State University | Columbus, OH\nM.Ed in Education | June 2018 - June 2019"
  },
  {
    "objectID": "index.html#professional-exaperience",
    "href": "index.html#professional-exaperience",
    "title": "Joshua Mull",
    "section": "Professional Exaperience",
    "text": "Professional Exaperience\nTBA"
  },
  {
    "objectID": "blog_posts/2024-12-04-Thomas-Fire/thomas-fire-aqi-Mull.html",
    "href": "blog_posts/2024-12-04-Thomas-Fire/thomas-fire-aqi-Mull.html",
    "title": "A Closer Look: Visualizing the Thomas Fire and AQI analysis with Remote Sensing",
    "section": "",
    "text": "Alt Text\n\n\n\nImpacts of the Fire\nThe Thomas Fire, which ignited on December 4, 2017, and burned until January 12, 2018, stands as one of the most devastating wildfires in California’s history. Spanning over 281,893 acres (approximately 1,141 square kilometers), it destroyed 1,063 structures and caused damages exceeding $2.2 billion.\nLocated in Southern California, the fire affected Ventura and Santa Barbara counties. These areas are known for their dry, Mediterranean climate, which can exacerbate fire conditions. The fire’s vast spread impacted a variety of landscapes, including urban areas, agricultural lands, and natural reserves.\nThe Thomas Fire occurred during a particularly severe fire season in California, which saw multiple large-scale wildfires. Historically, this region has been prone to wildfires, but recent years have seen an increase in both frequency and intensity, attributed to climate change and changing land use patterns.\nThe fire’s impact on air quality was devastating, with particulate matter levels soaring and the Air Quality Index (AQI) reaching hazardous levels in affected areas. Communities, especially those with vulnerable populations such as the elderly and children, faced significant health risks. The destruction of over 1,000 structures also led to displacement and long-term economic challenges for residents.\nIn this blog post, we delve into the use of false color imagery and AQI analysis to uncover the environmental and health impacts of the Thomas Fire. By leveraging satellite data and geospatial analysis, we aim to provide a comprehensive understanding of how this catastrophic event altered the landscape and air quality. This analysis offers insights into the broader implications of wildfires on public health and environmental sustainability.\n\n\nAbout the Data\nFire Perimeter: Shapefile of the Thomas Fire perimeter, obtained from the California Department of Forestry and Fire Protection (CAL FIRE).\nSatellite Imagery: Landsat 8 imagery accessed via the server at UCSB\nAQI Data[^3]: This dataset is a dataframe with AQI values of cities all across the US. Retrieved from The U.S. Environmental Protection Agency [^3]\n\nReferences\nU.S. Environmental Protection Agency. (2017). Daily AQI by county, 2017 [Data set]. Retrieved from https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip\nU.S. Environmental Protection Agency. (2017). Daily AQI by county, 2017 [Data set]. Retrieved from https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip\nCalifornia Department of Forestry and Fire Protection (CalFire). (2023). Fire perimeters. Retrieved November 16, 2024, from https://www.fire.ca.gov/what-we-do/fire-resource-assessment-program/fire-perimeters\nLandsat Data: EDS 220. (2024). Retrieved from /courses/EDS220/data/hwk4_landsat_data landsat8-2018-01-26-sb-simplified.nc\n\n\n\nFalse Color: A Quick Overview\nFalse color imagery is a powerful tool used in remote sensing to enhance specific features of the landscape that might not be visible in natural color images. By assigning visible colors (like red, green, and blue) to spectral bands that the human eye cannot see (such as near-infrared), false color images highlight various aspects of the environment. For instance, healthy vegetation reflects more infrared light and appears bright red in false color images, while burned areas, like those from the Thomas Fire, show up in darker hues, making them easier to distinguish.\n\n\nAbout\n\nPurpose:\nIn this blog post, we delve into the use of false color imagery and AQI analysis to uncover the environmental and health impacts of the Thomas Fire. By leveraging satellite data and geospatial analysis, we aim to provide a comprehensive understanding of how this catastrophic event altered the landscape and air quality. This analysis offers insights into the broader implications of wildfires on public health and environmental sustainability.\nNow let’s dive in by importing some libraries!\n\n\nImport Libraries\n\nimport os\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport pandas as pd\nimport rioxarray as rioxr\nimport matplotlib.ticker as ticker\nfrom matplotlib.patches import Patch\nimport warnings \n\n\n\n\nImport File Geodatabase\n\n# Read in gdb file with geopandas. Save as variable fire_bounds\nfire_bound = gpd.read_file(\"data/fire23-1gdb/fire23_1.gdb\")\n\n\nQuick Data Exploration\nChecking a few things like head, crs and shape is important to familarizing yourself with the data you are working with.\n\n# Check the dataset\nprint(fire_bound.head())\n\n# Check the CRS \nprint(fire_bound.crs)\n\n# Check the number of rows and columns \nprint(fire_bound.shape)\n\n    YEAR_ STATE AGENCY UNIT_ID  FIRE_NAME   INC_NUM  \\\n0  2023.0    CA    CDF     SKU  WHITWORTH  00004808   \n1  2023.0    CA    LRA     BTU     KAISER  00010225   \n2  2023.0    CA    CDF     AEU    JACKSON  00017640   \n3  2023.0    CA    CDF     AEU     CARBON  00018821   \n4  2023.0    CA    CDF     AEU    LIBERTY  00018876   \n\n                                  IRWINID                 ALARM_DATE  \\\n0  {7985848C-0AC2-4BA4-8F0E-29F778652E61}  2023-06-17T00:00:00+00:00   \n1  {43EBCC88-B3AC-48EB-8EF5-417FE0939CCF}  2023-06-02T00:00:00+00:00   \n2  {B64E1355-BF1D-441A-95D0-BC1FBB93483B}  2023-07-01T00:00:00+00:00   \n3  {CB41DB0A-E4B1-489D-A4EA-738F2CD6DB3B}  2023-07-11T00:00:00+00:00   \n4  {F83F70A4-07A7-40B8-BD51-10CCC1C30D63}  2023-07-11T00:00:00+00:00   \n\n                   CONT_DATE  C_METHOD  CAUSE  OBJECTIVE COMPLEX_NAME  \\\n0  2023-06-17T00:00:00+00:00       1.0    5.0        1.0         None   \n1  2023-06-02T00:00:00+00:00       1.0    5.0        1.0         None   \n2  2023-07-02T00:00:00+00:00       1.0    2.0        1.0         None   \n3  2023-07-11T00:00:00+00:00       1.0    9.0        1.0         None   \n4  2023-07-12T00:00:00+00:00       1.0   14.0        1.0         None   \n\n  COMPLEX_ID COMMENTS FIRE_NUM  Shape_Length     Shape_Area  \\\n0       None     None     None    933.907127   23184.946763   \n1       None     None     None    986.343353   55046.898792   \n2       None     None     None   2115.572740  112561.147688   \n3       None     None     None   1994.866526  237794.210367   \n4       None     None     None   4008.305800  287241.810389   \n\n                                            geometry  \n0  MULTIPOLYGON (((-243242.555 394267.371, -24324...  \n1  MULTIPOLYGON (((-167826.147 203275.612, -16782...  \n2  MULTIPOLYGON (((-79176.443 31393.490, -78959.0...  \n3  MULTIPOLYGON (((-85936.934 47921.886, -85856.4...  \n4  MULTIPOLYGON (((-86427.836 26461.613, -86436.1...  \nEPSG:3310\n(22261, 19)\n\n\n\n# Check if the CRS is projected or geographic\nif fire_bound.crs.is_projected:\n    print(\"The CRS is projected.\")\nelif fire_bound.crs.is_geographic:\n    print(\"The CRS is geographic.\")\n\nThe CRS is projected.\n\n\n\n\n\nFire Data Exploration\nWith some quick data explloration, you can see that the dataset from California Department of Forestry and Fire Protection has over 22,000 fires between the years 1878 and 2023. You can also see what types column names and values we are dealing with. For example, are there capital letters? spaces? unusual characters in columns? This will help further filtering the data to the Thomas Fire in 2017\n\n💡 Tip: Look at the year column. Do you notice anything that might make filtering the data in that column tricky?\n\nNow that we know we can filter for just the Thomas Fire in 2017\n\n# Save as vairable thomas_fire\nthomas_fire = fire_bound[(fire_bound['FIRE_NAME'] == 'THOMAS') & (fire_bound['YEAR_'] == 2017.0)]\n\n# Check the dataset\nthomas_fire.head()\n\n\n\n\n\n\n\n\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nIRWINID\nALARM_DATE\nCONT_DATE\nC_METHOD\nCAUSE\nOBJECTIVE\nCOMPLEX_NAME\nCOMPLEX_ID\nCOMMENTS\nFIRE_NUM\nShape_Length\nShape_Area\ngeometry\n\n\n\n\n2654\n2017.0\nCA\nUSF\nVNC\nTHOMAS\n00003583\n\n2017-12-04T00:00:00+00:00\n2018-01-12T00:00:00+00:00\n7.0\n9.0\n1.0\nNone\nNone\nCONT_DATE based on Inciweb\nNone\n445282.444798\n1.140367e+09\nMULTIPOLYGON (((34867.386 -396856.457, 34819.3...\n\n\n\n\n\n\n\n\n# Check the fire perimeter by plotting \nthomas_fire.plot()\n\n\n\n\n\n\n\n\nAfter I filtered for just the 2017 Thomas Fire, it is handy to plot it to see exactly what you are working with. In this case, this looks to be the Thomas Fire perimeter we are looking for! Next, I’ll export it as a shapefile to use later.\nExport the filtered dataframe as a shapefile to use later in our analysis\n\n# Use package warnings to ignore unwanted outputs`qw\nwarnings.filterwarnings('ignore')\n\n# Specify the output path where you want to save the new shapefile\noutput_path = \"data/Thomas_Fire.shp\"\n\n# Save the filtered GeoDataFrame to the specified path\nthomas_fire.to_file(output_path)\n\n\n📝 A Quick Note: I chose to use a shapefile for several reasons, the first being because I am more familiar with that file type. Second, the format is straightforward and easy to use when working with vector data.\n\n\n\nBring in Landsat Image\nNext, upload the satellite image of the Santa Barbara area. This image is form the Landsat program and specifically Landsat 8\n\n# Create file path to landsat data, save as variable root\nroot = os.path.join('/','courses', 'EDS220', 'data', 'hwk4_landsat_data')\n\n# Use os.path.join to select variable root and file landsat8-2018-01-26-sb-simplified.nc file, save it as variable fp\nfp = os.path.join(root,'landsat8-2018-01-26-sb-simplified.nc')\n\n# Use rioxr to open file and save it as color bands \ncolor_bands = rioxr.open_rasterio(fp)\n\n# Check the variable\ncolor_bands\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 25MB\nDimensions:      (band: 1, x: 870, y: 731)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (band, y, x) float64 5MB ...\n    green        (band, y, x) float64 5MB ...\n    blue         (band, y, x) float64 5MB ...\n    nir08        (band, y, x) float64 5MB ...\n    swir22       (band, y, x) float64 5MB ...xarray.DatasetDimensions:band: 1x: 870y: 731Coordinates: (4)band(band)int641array([1])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\nTake a look at the output for the variable color_bands. You can see the data contains variables named “red”, “green”, “blue”, “nir08”, “swir22” and has the dimensions (band: 1x: 870y: 731). These variable names are what we use to present a false color image.\n\n\nDrop the Band Dimensions and False Color Mapping\n\n# Original dimensions and coordinates\nprint(color_bands.dims, color_bands.coords,'\\n')\n\n# Remove length 1 dimension (band)\ncolor_bands = color_bands.squeeze()\nprint(color_bands.dims, color_bands.coords,'\\n')\n\n# Remove coordinates associated to band\ncolor_bands = color_bands.drop_vars('band')\nprint(color_bands.dims, color_bands.coords)\n\nFrozenMappingWarningOnValuesAccess({'band': 1, 'x': 870, 'y': 731}) Coordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0 \n\nFrozenMappingWarningOnValuesAccess({'x': 870, 'y': 731}) Coordinates:\n    band         int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0 \n\nFrozenMappingWarningOnValuesAccess({'x': 870, 'y': 731}) Coordinates:\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\n\n\n\n💡 Tip: Dropping the band will allow us to work with one less dimesion, making it easier to plot\n\nIn remote sensing and imaging, each color band (red, green, blue) represents a different part of the visible light spectrum captured by sensors. By combining these bands, we can create a more natural and visually understandable image, similar to what we see with our eyes.\n\n# Convert the selected variables to a NumPy array and plot the RGB image\ncolor_bands[['red', 'green', 'blue']].to_array().plot.imshow()\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n\n\n\n\n\n\n\n\n\nA quick look and we can see that this does not look like a satellite image and we recieved a warning about “valid range”. This is because our values are being skewed because of some extreme numbers. we will want to change the parameter to robust = True. It scales the image based on these percentiles, effectively ignoring the extreme low (below the 2nd percentile) and high (above the 98th percentile) values.\n\n🤔 Thinking: What are some object in the earths atmosphere that could cause extreme values? HINT: Think of what blocks the sun for us!\n\n\n# Convert the selected variables to a NumPy array and plot the RGB image, adjust scale with robust = True \ncolor_bands[['red', 'green', 'blue']].to_array().plot.imshow(robust = True)\n\n\n\n\n\n\n\n\nSwitching to the SWIR (Shortwave Infrared), NIR (Near-Infrared), and blue spectral bands allows us to visualize environmental details that aren’t visible with traditional RGB bands. SWIR is useful for detecting moisture content in soil and vegetation, while NIR helps assess vegetation health. It should help us seeing the impact of the Thomas Fire more clearly.\n\n# Create false color image by plotting the short-wave infrared (swir22), near-infrared, and red variables \ncolor_bands[['swir22', 'nir08', 'blue']].to_array().plot.imshow(robust = True)\n\n\n\n\n\n\n\n\nNow, looking at the bottom right of the image, the Thomas Fire burn area is indeed more clearly defined.\n\n\nMap with Thomas Fire SHapefile We Made\nNow we can use the shapefile we made early to highlight the Thomas Fire’s perimeter.\n\n# Import Thomas Fire Perimeter\nfire_bound = gpd.read_file(os.path.join('data','Thomas_Fire.shp'))\n\n# Check CRS's \nprint(fire_bound.crs == color_bands.rio.crs)\n\nFalse\n\n\nSince the CRS’s do not match, we need to transform. Since this is important for mapping, we will write an assert test to make sure\n\n# Ensure CRS matches (transform CRS if necessary)\nif fire_bound.crs != color_bands.rio.crs:\n    fire_bound = fire_bound.to_crs(color_bands.rio.crs)\n\n# Check if the CRSs match\nassert fire_bound.crs == color_bands.rio.crs, \"CRS of fire_bound does not match CRS of color_bands\"\n\nprint(\"CRS match successfully!\")\n\nCRS match successfully!\n\n\n\n💡 Tip: Assert tests are a quick way to verify your output is what you want\n\nNow that they match, we can plot them in the same figure.\n\n# Plot the RGB image with robust scaling\nfig, ax = plt.subplots(figsize=(10, 8))\ncolor_bands[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax=ax, robust=True)\n\n# Set the y-axis to display integers only \nax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%d'))\n\n# Overlay the fire perimeter\nfire_bound.plot(ax=ax, edgecolor='red', facecolor='none', linewidth=1.5, label='Thomas Fire Perimeter')\n\n# Customize the plot\nax.set_title('2017 Thomas Fire Boundary Overlaid on Landsat\\nFalse Color Image (SWIR/NIR/Red)', fontsize=15)\nax.set_xlabel('Easting (meters)')\nax.set_ylabel('Northing (meters)')\n\n# Add a custom legend \nlegend_handles = [Patch(facecolor='none', edgecolor='red', linewidth=1.5, label='Thomas Fire Perimeter')] \nax.legend(handles=legend_handles, loc='upper right')\n\n# PLot figure text \nplt.figtext(0, 0,\n           \"Data: Satellite Imagery: Landsat data accessed via the server at UCSB. Thomas Fire Perimeter: California Department of Forestry and Fire Protection\\nAccessed: November 21\")\n\nplt.show()\n\n\n\n\n\n\n\n\nThis map illustrates the Thomas Fire perimeter overlaid on a false color image created using shortwave infrared (SWIR), near-infrared (NIR), and red bands from the Landsat satellite imagery. SWIR (Shortwave Infrared) Band: Mapped to the red channel, SWIR is sensitive to moisture content and can distinguish between dry and wet areas, as well as highlight burn scars from wildfires. NIR (Near-Infrared) Band: Mapped to the green channel, NIR is useful for vegetation analysis because healthy vegetation reflects more near-infrared light. Red Band: Mapped to the blue channel, the red band provides detail and clarity to the overall image.\n\n\nThe Impact on AQI\nHow did the thomas fire effect AQI? Let’s read in the AQI data we talked about at earlier to see!\n\n# Read in data, use compression = 'zip' for the ZIP file\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip', compression = 'zip')\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip', compression = 'zip')\n\n\n\nData Exploration and Cleaning\nLike we did before lets explore the data to see what we are working with.\n\n# Do some data exploration\nprint(aqi_17.columns)\nprint(aqi_18.columns)\nprint(aqi_17.shape)\nprint(aqi_18.shape)\nprint(aqi_17.isnull().sum())\nprint(aqi_18.isnull().sum())\n\nIndex(['State Name', 'county Name', 'State Code', 'County Code', 'Date', 'AQI',\n       'Category', 'Defining Parameter', 'Defining Site',\n       'Number of Sites Reporting'],\n      dtype='object')\nIndex(['State Name', 'county Name', 'State Code', 'County Code', 'Date', 'AQI',\n       'Category', 'Defining Parameter', 'Defining Site',\n       'Number of Sites Reporting'],\n      dtype='object')\n(326801, 10)\n(327543, 10)\nState Name                   0\ncounty Name                  0\nState Code                   0\nCounty Code                  0\nDate                         0\nAQI                          0\nCategory                     0\nDefining Parameter           0\nDefining Site                0\nNumber of Sites Reporting    0\ndtype: int64\nState Name                   0\ncounty Name                  0\nState Code                   0\nCounty Code                  0\nDate                         0\nAQI                          0\nCategory                     0\nDefining Parameter           0\nDefining Site                0\nNumber of Sites Reporting    0\ndtype: int64\n\n\nFor the purpose of the analysis I only printed the exploration I found to be important to moving along in the analysis. Columnn names and null values are important for filtering and for computations like mean, which we will use for our AQI. Knowing how many rows are in dataframes will come in handy for stacking, which we will do next.\nNow lets stack the 2017 and 2018 into one dataframe.Since we want to keep all observations for AQI, we will use concat to put them all together.\n\n# Use .concat to glue the data frames togehter, ave it as variable aqi\naqi = pd.concat([aqi_17, aqi_18])\n\n# Check the first \naqi.shape\n\n(654344, 10)\n\n\nSince I know that each data set had around 325,000 rows, 654,344 is on par with what I expect from the concat function.\nNow that we have the data all in one place, let’s clean the names to remove the space in some of the coumn names, filter for Santa Barbara, and change the date column to datetime\n\n# Simplify column names\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\n# Check the output\naqi.columns\n\n# Filter by county is equal to Santa Barbara, save as variable aqi_sb, use .drop to remove the columns listed above from the aqi_sb data frame\naqi_sb = aqi[aqi['county_name'] == 'Santa Barbara'].drop(['state_name', \n                                                          'county_name', \n                                                          'state_code', \n                                                          'county_code'], axis = 1)\n\n# Use pd.to_datetime to change the 'date' column in the aqi_sb data frame \naqi_sb.date = pd.to_datetime(aqi_sb['date'])\n\n\n# Use set_index to make the 'date' column the index \naqi_sb = aqi_sb.set_index('date')\n\n\n\nCalculate Rolling Average and Plot\nWhen analyzing air quality data, it’s essential to smooth out short-term fluctuations to see clearer trends over time. One effective method is to calculate a rolling average, which provides a smoothed value by averaging over a specific period. Here’s one way to do that with .rolling()\n\n# Calculate AQI rolling average over 5 days\nrolling_average = aqi_sb['aqi'].rolling('5D').mean()\n\n# Call previous variable rolling_average and save it to a new column named five_day_average in the aqi_sb data frame\naqi_sb['five_day_average'] = rolling_average\n\n# Check for the new column in the head \naqi_sb.head()\n\n# Create the plot\nplt.figure(figsize=(14, 7))\nplt.plot(aqi_sb.index, aqi_sb['aqi'], label='Daily AQI', color='blue', alpha=0.5)\nplt.plot(aqi_sb.index, rolling_average, label='5-Day Rolling Average', color='red', linewidth=2)\n\n# Highlight the period of the Thomas Fire in December 2017\nplt.axvspan(pd.Timestamp('2017-12-04'), pd.Timestamp('2017-12-23'), color='yellow', alpha=0.5, label='Thomas Fire Period')\n\n# Add titles and labels\nplt.title('Daily AQI and 5-Day Rolling Average for Santa Barbara County')\nplt.xlabel('Date')\nplt.ylabel('AQI')\nplt.legend()\nplt.grid(True)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nWrapping Up\nIn this plot, the Thomas Fire dates are highlighted by the yellow rectangle. It is clear that the AQI went through the roof during this period, a spike that was anticipated given the nature of forest fires. Such an event underscores the immediate effects of wildfires on air quality, posing significant health risks to nearby communities and emphasizing the need for robust environmental monitoring and emergency response strategies. By analyzing these trends through false color imagery and AQI data, we gain invaluable insights into the environmental and public health challenges posed by such disasters, reinforcing the importance of sustainable land management and fire prevention measures."
  },
  {
    "objectID": "blog_posts/2024-10-18-Maine-Ticks/index.html",
    "href": "blog_posts/2024-10-18-Maine-Ticks/index.html",
    "title": "Tick Terrains: Tracking the Territory of Maine’s Tiniest Terrors",
    "section": "",
    "text": "Portland Head Light, the oldest lighthouse in Maine 1"
  },
  {
    "objectID": "blog_posts/2024-10-18-Maine-Ticks/index.html#footnotes",
    "href": "blog_posts/2024-10-18-Maine-Ticks/index.html#footnotes",
    "title": "Tick Terrains: Tracking the Territory of Maine’s Tiniest Terrors",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://thedownlo.com/north-america-travel/usa-travel/maine/the-ultimate-maine-bucketlist-58-things-to-do-in-maine/↩︎\nhttps://www.whatsthatbug.com/do-ticks-survive-in-winter/↩︎\nhttps://www.kitteryme.gov/climate-action-planning-kittery/pages/climate-change-maine↩︎\nhttps://www.noaa.gov/↩︎\nhttps://www.cdc.gov/↩︎"
  },
  {
    "objectID": "blog_posts/2025-03-09-Global-Fishing/global_fisheries.html",
    "href": "blog_posts/2025-03-09-Global-Fishing/global_fisheries.html",
    "title": "Global Fishing: 5 Year Trend Infographic",
    "section": "",
    "text": "Trawler vessel returning to port\n\n\n\nThe Cost of Global Fisheries\nWhen we think about seafood, we think delicious lobster, shrimp, mussels and tuna. Our senses can be positive and negative, like thinking about how fresh it can be and how maybe not so good it can smell. Maybe we also think about the cost, we all know a really good sushi restaurant comes at a price. But what if you look a little deeper? Look past the seafood itself, and look more closely at the big, often diesel powered, machines used to catch them. The smoke, oil, air pollution, greenhouse gasses are all a byproduct of ocean fishing. This makes you quickly realize the environmental implications of such a massive operation. When you think about the shear number of vessels, quantifying this pollution seems almost impossible. However, with new advancement in Automated Identification System (AIS) tracking and satellite data, this challenge has become more manageable.\n\n\nThe Data\nThe novel dataset has been provided by emLab and Global Fishing Watch. This new data set has geographical locations for every single AIS fishing vessel in the world as well as vessels that are known as the dark fleet, meaning they do not have AIS and do not broadcast a location. With this dataset not only can we can get an idea of the total CO2 pollution associated with global fisheries, but we can also see which countries standout as the biggest contributors. These are important first steps if we want to curb emissions associated with seafood production.\n\n\nThe Goals/Questions to Address\nThere are some important questions that I wanted to address when making this info graphic:\n\nWho are the biggest emitters when it comes to fishing?\nWhat trends are we seeing over time?\nWhat can we extrapolate from the information?\nDoes the trend seem sustainable?\n\n\n\nThe Viz\n\n\n\nThe Approach, AKA How did I come to this design?\n\nGraphic Form, Color, Titles and Theme\nWhen you look at this viz for the first time your eyes are immediately drawn to the color of the line and bar plots. The background is kind of forgotten and the attention is placed on the data. This was the goal. I wanted to focus solely on the data/numbers associated with fishing vessels. Using simple graphic forms like line and bar plots allows the user to quickly pull information. The title gives a brief but important information while the subtitle adds a bit more context for the reader. All of this being critical for quick, comprehensive analysis of CO2 emissions by country for global fisheries.\n\n\nTypography, General Design, Context and Message\nThe typography I wanted to keep simple. Text is bold where needed to tell the user, “Hey, there is some important context here!”. For example, it was important that I gave context to just how much more China fishing industry is contributing when compared to the top 10 polluters. I used some bold text within the graph to draw attention to what you are actually looking at. The general design I want to be linearly, meaning it flows well and does not require a complex path on paper. I chose to go wide instead of long because it feels more natural to how someone would read a book. Starting at the top left the reader quickly picks up on the context for the viz and its central message, which is clearly stated immediately in both the title and subtitle.\n\n\nDEI and Accessibility\nI want to acknowledge that in today’s climate, DEI is more important than ever. While I think that some emissions can be related to countries who have less resources to invest in more modern equipment, my dataset does not allow me to explore that question.\nAccessibility was important to me when making the graphics. I used the {gghighight} package to make data standout for the reader. The colors matter less and act as a contrast to the background. I did create the final plot in Affinity and added alt text in this quarto doc to make this information more available to everyone.\n\n\n\nFinal Code for Each Viz\n\nNecessary Packages\n\n\nCode\n#### Load libraries \nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(ggtext)\nlibrary(scales)\nlibrary(hrbrthemes)\nlibrary(maps)\nlibrary(janitor)\nlibrary(showtext)\nlibrary(MetBrewer)\nlibrary(scico)\nlibrary(patchwork)\nlibrary(gghighlight)\n\n\n\n\nPlot 1\n\n\nCode\n# read in the data\nemissions_years &lt;- read_csv(\"data/meds_high_resolution_annual_ais_emissions_spatial_data_v20241121.csv\")\n\n# group by flag, year and summarize emissions \nemissions_by_year &lt;- emissions_years %&gt;%\n  group_by(flag, year) %&gt;% \n  summarise(total_co2_mt = sum(emissions_co2_mt)) %&gt;%\n  ungroup() %&gt;% \n  mutate(global_avg_co2_mt = mean(total_co2_mt)) %&gt;%\n  filter(flag %in% top_9$flag,\n         flag != \"CHN\")\n\n# gave the countries actual names \nemissions_by_year &lt;- emissions_by_year %&gt;%\n  mutate(flag = recode(flag,\n                       'ARG' = 'Argentina',\n                       'ISL' = 'Iceland',\n                       'JPN' = 'Japan',\n                       'KOR' = 'South Korea',\n                       'NOR' = 'Norway',\n                       'RUS' = 'Russia',\n                       'TWN' = 'Taiwan',\n                       'USA' = 'United States'))\n\n\n#### MISC ####\nfont &lt;- \"Gudea\"\nfont_add_google(family=font, font, db_cache = TRUE)\nfa_path &lt;- systemfonts::font_info(family = \"Font Awesome 6 Brands\")[[\"path\"]]\nfont_add(family = \"fa-brands\", regular = fa_path)\ntheme_set(theme_minimal(base_family = font, base_size = 10))\nbg &lt;- \"#F4F5F1\"\ntxt_col &lt;- \"black\"\nshowtext_auto(enable = TRUE)\n\np_1 &lt;- emissions_by_year %&gt;% \n  ggplot()  +\n  geom_point(data=emissions_by_year %&gt;% \n               slice_max(year),\n             aes(x=year, y=total_co2_mt, color=flag),shape=16) +\n  geom_line(aes(x=year, y=total_co2_mt, color=flag)) +\n  gghighlight(use_direct_label = FALSE,\n              unhighlighted_params = list(colour = alpha(\"grey85\", 1))) +\n  geom_text(data=emissions_by_year %&gt;%\n              slice_max(year),\n             aes(x=year, y=total_co2_mt, color=flag, label = scales::comma(round(total_co2_mt))),\n             hjust = .65, vjust = -1, size=2.5, family=font, fontface=\"bold\") +\n  scale_color_met_d(name=\"Redon\") +\n  scale_y_continuous(labels = c(\"\",\"\",\"\",\"\",\"\")\n                     ) +\n  scale_x_continuous(labels = function(x) substring(x, 3, 4)) +\n\n  \n  \n  #facet_wrap(~ country) +\n  facet_wrap(~  factor(flag, levels=c('Argentina','Iceland','Japan', 'South Korea','Norway', 'Russia', 'Taiwan', 'United States'))) +\n  coord_cartesian(clip = \"off\") +\n  theme(\n    axis.title = element_blank(),\n    axis.text = element_text(color=txt_col, size=9),\n    strip.text.x = element_text(face=\"bold\", size = 11),\n    plot.title = element_markdown(hjust=.5,\n                                  size=34, \n                                  color=txt_col,\n                                  lineheight=.8, \n                                  face=\"bold\", margin=margin(20,0,30,0)),\n    plot.subtitle = element_markdown(hjust=.5,\n                                     size=18, \n                                     color=txt_col,\n                                     lineheight = 1, \n                                     margin=margin(10,0,30,0)),\n    plot.caption = element_markdown(hjust=.5, \n                                    margin=margin(60,0,0,0), \n                                    size=8, color=txt_col, \n                                    lineheight = 1.2),\n    plot.caption.position = \"plot\",\n    plot.background = element_rect(color=bg, fill=bg),\n    plot.margin = margin(10,10,10,10),\n    legend.position = \"none\",\n    legend.title = element_text(face=\"bold\")\n  )\n\n\n\ntext &lt;- tibble(\n  x = 0, y = 0,\n  label = \"Understanding emissions from global fisheries is important to curbing Greenhouse Gasses associated with the production of seafood. This graph represents a 5 year trend by the world's top emittors. The global average for emissions is around 212,000 metric tons for this time span. A number that is dwarfed by these countries\"\n)\n\nsub &lt;- ggplot(text, aes(x = x, y = y)) +\n  geom_textbox(\n    aes(label = label),\n    box.color = bg, fill=bg, width = unit(9, \"lines\"),\n    family=font, size = 3, lineheight = 1\n  ) +\n  coord_cartesian(expand = FALSE, clip = \"off\") +\n  theme_void() +\n  theme(plot.background = element_rect(color=bg, fill=bg))\n\n\n# TITLE\ntext2 &lt;- tibble(\n  x = 0, y = 0,\n  label = \"**Global Fisheries Emissions: 5-Year Trend**&lt;br&gt;\"\n)\n\ntitle &lt;- ggplot(text2, aes(x = x, y = y)) +\n  geom_textbox(\n    aes(label = label),\n    box.color = bg, fill=bg, width = unit(12, \"lines\"),\n    family=font, size = 10, lineheight = 1\n  ) +\n  coord_cartesian(expand = FALSE, clip = \"off\") +\n  theme_void() +\n  theme(plot.background = element_rect(color=bg, fill=bg))\n\nfinalPlot &lt;- ((title+sub)/p_1) +\n  plot_layout(heights = c(1, 2)) +\n  plot_annotation(\n    theme=theme(plot.caption = element_markdown(hjust=0, \n                                                margin=margin(0,0,0,0), \n                                                size=6, color=txt_col, \n                                                lineheight = 1.2),\n                plot.margin = margin(20,20,20,20),))\n\nprint(finalPlot)\n\nshowtext_opts(dpi = 600) \n\n# Save the figure\nggsave(\"Global_fisheries.png\",\n      bg=bg,\n      height = 8,\n      width = 5,\n      dpi = 600)\n\n\n #### Plot 2\n\n\nCode\n# filter for just CO2 for China over the same years\nchina_emissions &lt;- emissions_years %&gt;%\n  group_by(flag, year) %&gt;% \n  summarise(total_co2_mt = sum(emissions_co2_mt)) %&gt;%\n  ungroup() %&gt;% \n  mutate(global_avg_co2_mt = mean(total_co2_mt)) %&gt;% \n  filter(flag %in% top_9$flag)\n\np_4 &lt;- china_emissions %&gt;% \n  ggplot()  +\n  geom_point(data=china_emissions %&gt;% \n               slice_max(year),\n             aes(x=year, y=total_co2_mt, color=flag),shape=16) +\n  geom_line(aes(x=year, y=total_co2_mt, color=flag)) +\n  gghighlight(flag == \"CHN\",\n              use_direct_label = FALSE) +\n  geom_text(data=china_emissions %&gt;% \n              filter(flag == \"CHN\") %&gt;%\n              slice_max(year),\n             aes(x=year, y=total_co2_mt, color=flag, label = scales::comma(round(total_co2_mt))),\n             hjust = .90, vjust = -1, size=5, family=font, fontface=\"bold\") +\n  scale_color_met_d(name=\"Redon\") + \n  labs(title = \"China\") +\n  theme(\n    legend.position = \"none\",\n    axis.text.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    plot.title = element_markdown(hjust=.5,\n                                  size=20, \n                                  color=txt_col,\n                                  lineheight=.8, \n                                  face=\"bold\", margin=margin(20,0,30,0))\n        )\n\nprint(p_4)\n\nshowtext_opts(dpi = 600) \n\n# Save the figure\nggsave(\"China_fisheries.png\",\n      bg=bg,\n      height = 8,\n      width = 8,\n      dpi = 600)\n\n\n\n\n\nPlot 3\n\n\nCode\n# calculate total emissions over the 5 year span by country\ntotal_19_24 &lt;- china_emissions %&gt;%\n  filter(year == c(2019, 2024)) %&gt;%\n  mutate(flag = recode(flag,\n                       'ARG' = 'Argentina',\n                       'ISL' = 'Iceland',\n                       'JPN' = 'Japan',\n                       'KOR' = 'South Korea',\n                       'NOR' = 'Norway',\n                       'RUS' = 'Russia',\n                       'TWN' = 'Taiwan',\n                       'USA' = 'United States',\n                       'CHN' = 'China'))\n\ntotal_emissions &lt;- total_19_24 %&gt;%\n  group_by(flag) %&gt;% # Group by the identifier (e.g., country or flag)\n  mutate(percent_chng = ifelse(year == 2024, \n                               (total_co2_mt - total_co2_mt[year == 2019]) / total_co2_mt[year == 2019] * 100, \n                               NA)) %&gt;% \n  drop_na() %&gt;% \n  ungroup()\n\n# Add a column with your condition for the color\ntotal_emissions &lt;- total_emissions %&gt;% \n  mutate(mycolor = ifelse(percent_chng&gt;0, \"type1\", \"type2\"))\n\n# Arrange data in ascending order of percent_chng\ntotal_emissions &lt;- total_emissions %&gt;%\n  arrange(percent_chng) # Use ascending order\n\n# Set the factor levels for `flag` based on the new order\ntotal_emissions &lt;- total_emissions %&gt;%\n  mutate(flag = factor(flag, levels = flag)) # Match order to factor levels\n\n# Plot the data\np_2 &lt;- ggplot(total_emissions, aes(x=flag, y=percent_chng)) +\n  geom_segment(aes(x=flag, xend=flag, y=0, yend=percent_chng, color=mycolor), size=8, alpha=0.9) +\n  theme_light() +\n  theme(\n    legend.position = \"none\",\n    panel.border = element_blank(),\n    axis.text.x = element_text(size = 10), \n    axis.text.y = element_text(size = 10),  \n    axis.title.x = element_text(size = 5, margin = margin(t = 10)),\n    plot.title = element_text(size = 14),\n    plot.background = element_rect(color = bg, fill = bg), \n    panel.background = element_rect(color = bg, fill = bg)\n    ) +\n  labs(title = \"CO&lt;sub&gt;2&lt;/sub&gt; Percent Change Over 5 Years\") +\n  xlab(\"\") +\n  ylab(\"Percent Change\") + \n  coord_flip() +\n  scale_y_continuous(labels = scales::label_percent(scale = 1)) + \n  scale_color_manual(values = c(\"type1\" = \"grey60\", \"type2\" = \"#B30600\")) +\n  theme_ipsum() +\n  theme(plot.title = element_markdown(hjust=.5,\n                                  size=15, \n                                  color=txt_col,\n                                  lineheight=.8, \n                                  face=\"bold\"),\n        axis.title.x = element_blank(),\n        legend.position = \"none\",\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_blank())\n\n\n\nprint(p_2)\n\n\nshowtext_opts(dpi = 600) \n\n# Save the figure\nggsave(\"total_change_co2.png\",\n      bg=bg,\n      height = 5,\n      width = 5,\n      dpi = 600)\n\n\n #### Plot 4\n\n\nCode\n# filter for emissions by vessel type\nemission_vessel &lt;- emissions_years %&gt;%\n  group_by(vessel_class) %&gt;%\n  summarise(total_co2_mt = sum(emissions_co2_mt)) %&gt;% \n  arrange(desc(total_co2_mt)) %&gt;% \n  slice(1:10)\n\n# rename some of the columns because they are not so pretty to read \nemission_vessel &lt;- emission_vessel %&gt;%\n  mutate(vessel_class = case_when(\n    vessel_class == \"trawlers\" ~ \"Trawlers\",\n    vessel_class == \"squid_jigger\" ~ \"Squid Jigger\",\n    vessel_class == \"passenger\" ~ \"Passenger\",\n    vessel_class == \"drifting_longlines\" ~ \"Drifting Longlines\",\n    vessel_class == \"tuna_purse_seines\" ~ \"Tuna Purse Seines\",\n    vessel_class == \"pole_and_line\" ~ \"Pole and Line\",\n    vessel_class == \"set_longlines\" ~ \"Set Longlines\",\n    vessel_class == \"pots_and_traps\" ~ \"Pots and Traps\",\n    vessel_class == \"trollers\" ~ \"Trollers\",\n    vessel_class == \"set_gillnets\" ~ \"Set Gillnets\",\n    vessel_class == \"other_purse_seines\" ~ \"Other Purse Seines\",\n    TRUE ~ vessel_class\n  ))\n\n# show the top vessel emitters\np_4 &lt;- ggplot(emission_vessel, aes(vessel_class, y=total_co2_mt, fill=vessel_class)) +\n  geom_bar(stat=\"identity\", color=\"black\", fill = \"grey60\") +\n  scale_fill_manual(values=rep(\"grey\", 10)) +\n  theme_ipsum() +\n  theme(\n    legend.position=\"none\",\n    plot.title = element_text(hjust=0.5, vjust=1, size=14, margin=margin(b=10)),\n    plot.title.position = \"plot\",\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10),\n    plot.background = element_rect(color = bg, fill = bg), # Match background\n    panel.background = element_rect(color = bg, fill = bg), # Match panel background\n    panel.border = element_blank()\n  ) +\n  xlab(\"\") +\n  ylab(\"\") +\n  ggtitle(\"Total Global CO2 Emissions by Vessel\") +\n  scale_y_continuous(labels = scales::unit_format(unit = \"MT\", scale = 1e-3)) +\n  coord_flip()\n\n\nshowtext_opts(dpi = 600) \n\n# Save the figure\nggsave(\"total_co2_vessel.png\",\n      bg=bg,\n      height = 5,\n      width = 5,\n      dpi = 600)"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "Global Fishing: 5 Year Trend Infographic\n\n\n\nQuarto\n\n\nMEDS\n\n\nUCSB\n\n\nEDS240\n\n\n\nSummaraizing CO2 from global fisheries into one smooth infographic\n\n\n\nJoshua Mull\n\n\nMar 9, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTick Terrains: Tracking the Territory of Maine’s Tiniest Terrors\n\n\n\nQuarto\n\n\nMEDS\n\n\nUCSB\n\n\nEDS222\n\n\n\nFrom the environmental factors driving their population surges to the implications for public health, this blog uncovers the mysteries surrounding ticks in the Pine Tree…\n\n\n\nJoshua Mull\n\n\nDec 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA Closer Look: Visualizing the Thomas Fire and AQI analysis with Remote Sensing\n\n\n\nQuarto\n\n\nMEDS\n\n\nPython\n\n\nEDS220\n\n\n\nAnalysis and Visualization of the Thomas Fire Using Satellite Imagery and Geospatial Data\n\n\n\nJoshua Mull\n\n\nDec 4, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  }
]